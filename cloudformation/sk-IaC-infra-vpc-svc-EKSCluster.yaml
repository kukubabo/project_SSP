---
########################################################################################################
# Templatename : sk-IaC-infra-vpc-svc-EKSCluster.yaml
# Purpose : Cloudformation for service configuration of SK IaC standard infrastructure
#           Static resource configuration of business service units based on parent stack (initail configuration)
#           Reference Architecture : Service Type A ( xxxxxxxx.jpg )
# ------------------------------------------------------------------------------------------------------
#  version :     date      :    developer      :  reason
#  -------   -------------   -----------------   -------------------------------------------------------
#   1.0        2020.3.20    kim sang kyeong      first created
#
########################################################################################################
AWSTemplateFormatVersion: '2010-09-09'
Description: >
   'Cloudformation for service configuration of SK IaC standard infrastructure. (Reference Architecture : Service Type A)'

#----------------------[[ Metadata ]]-------------
Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      -
        Label:
          default: "Set service network information for infrastructure configuration."
        Parameters:
          - ParentVpcStack
          - StackCreater
          - SVCLoadBalancePublicSubnet1Block
          - SVCLoadBalancePublicSubnet2Block          
          - SVCNodeGroup1PrivateSubnet1Block
          - SVCNodeGroup1PrivateSubnet2Block
          - SVCNodeGroup2PrivateSubnet1Block
          - SVCNodeGroup2PrivateSubnet2Block

          
#----------------------[[ Parameters ]]-------------
Parameters:
# >>>>  Project Info Start    
  ParentVpcStack:
    Description: 'Enter the stack name created by Cloudformation for initial configuration among SK IaC standard infrastructure.'
    Type: String

  StackCreater:
    Description: 'Enter your IAM User Name.'
    Type: String
    Default: your-iamuserid
    
#  Project Info End  <<<<<    

# >>>> Subnet Info Start    

########## Public Network ###############

## Service Zone
  SVCLoadBalancePublicSubnet1Block:
    Type: String
    Default: 10.16.0.32/27
    Description: CidrBlock for service-loadbalance-public-[p/d]-subnet1 within the VPC

  SVCLoadBalancePublicSubnet2Block:
    Type: String
    Default: 10.16.32.32/27
    Description: CidrBlock for service-loadbalance-public-[p/d]-subnet2 within the VPC
  
########## Public Network ###############
  
########## Private Network ###############    
      
## Service Zone
  SVCNodeGroup1PrivateSubnet1Block:
    Type: String
    Default: 10.16.0.128/26
    Description: CidrBlock for service-nodegrp1-private-[p/d]-subnet1 within the VPC

  SVCNodeGroup1PrivateSubnet2Block:
    Type: String
    Default: 10.16.32.128/26
    Description: CidrBlock for service-nodegrp1-private-[p/d]-subnet2 within the VPC


  SVCNodeGroup2PrivateSubnet1Block:
    Type: String
    Default: 10.16.0.192/26
    Description: CidrBlock for service-nodegrp2-private-[p/d]-subnet1 within the VPC

  SVCNodeGroup2PrivateSubnet2Block:
    Type: String
    Default: 10.16.32.192/26
    Description: CidrBlock for service-nodegrp2-private-[p/d]-subnet2 within the VPC
    
#  Subnet Info End  <<<<<            
              
#----------------------[[ Conditions ]]-------------
Conditions:
  InNorthEast2:
    Fn::Equals: 
      - Ref: AWS::Region
      - 'ap-southeast-2'
#----------------------[[ Mappings ]]-------------
Mappings:
  # for environment abbr
  EnvMap:
    develop: 
      abbr: '-d'
    product:
      abbr: '-p'

#----------------------[[ Resources ]]-------------
Resources:

## Subnet   

### public 

## Service zone
  SVCLoadBalancePublicSubnet1:
    Type: AWS::EC2::Subnet
    Metadata:
      Comment: service-loadbalance-public-[p/d]-subnet1
    Properties:
      AvailabilityZone:
        Fn::Select:
        - '0'
        - Fn::GetAZs:
            Ref: AWS::Region
      CidrBlock:
        Ref: SVCLoadBalancePublicSubnet1Block
      MapPublicIpOnLaunch: false 
      VpcId: {'Fn::ImportValue': !Sub '${ParentVpcStack}-vpc'}
      Tags:
      - Key: Name
        Value: !Join 
          - ''
          - - 'service-loadbalance-public'
            - {'Fn::ImportValue': !Sub '${ParentVpcStack}-environment-abbr'}
            - '-subnet1'  
      - Key: Project
        Value: {'Fn::ImportValue': !Sub '${ParentVpcStack}-projectname'} 
      - Key: Env
        Value: {'Fn::ImportValue': !Sub '${ParentVpcStack}-environment'} 
      - Key: Zone
        Value: 'service zone'   
      - Key: Creater
        Value: !Sub '${StackCreater}' 
      - Key: Purpose
        Value: 'service for loadbalancer in (ap-southeast-2a)'
      - Key: 'kubernetes.io/role/elb'
        Value: 1        
        
  SVCLoadBalancePublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref SVCLoadBalancePublicSubnet1
      RouteTableId: {'Fn::ImportValue': !Sub '${ParentVpcStack}-route'}
      
  SVCLoadBalancePublicSubnet2:
    Type: AWS::EC2::Subnet
    Metadata:
      Comment: service-loadbalance-public-[p/d]-subnet2
    Properties:
      AvailabilityZone:
        Fn::Select:
        - '2'
        - Fn::GetAZs:
            Ref: AWS::Region
      CidrBlock:
        Ref: SVCLoadBalancePublicSubnet2Block
      MapPublicIpOnLaunch: false 
      VpcId: {'Fn::ImportValue': !Sub '${ParentVpcStack}-vpc'}
      Tags:
      - Key: Name
        Value: !Join 
          - ''
          - - 'service-loadbalance-public'
            - {'Fn::ImportValue': !Sub '${ParentVpcStack}-environment-abbr'}
            - '-subnet2'  
      - Key: Project
        Value: {'Fn::ImportValue': !Sub '${ParentVpcStack}-projectname'} 
      - Key: Env
        Value: {'Fn::ImportValue': !Sub '${ParentVpcStack}-environment'} 
      - Key: Zone
        Value: 'service zone'   
      - Key: Creater
        Value: !Sub '${StackCreater}'    
      - Key: Purpose
        Value: 'service for loadbalancer in (ap-southeast-2c)'
      - Key: 'kubernetes.io/role/elb'
        Value: 1                
        
  SVCLoadBalancePublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref SVCLoadBalancePublicSubnet2
      RouteTableId: {'Fn::ImportValue': !Sub '${ParentVpcStack}-route'}  


### private
          
## Service Zone
  SVCNodeGroup1PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Metadata:
      Comment: service-nodegrp1-private-[p/d]-subnet1
    Properties:
      AvailabilityZone:
        Fn::Select:
        - '0'
        - Fn::GetAZs:
            Ref: AWS::Region
      CidrBlock:
        Ref: SVCNodeGroup1PrivateSubnet1Block
      VpcId: {'Fn::ImportValue': !Sub '${ParentVpcStack}-vpc'}
      Tags:
      - Key: Name
        Value: !Join 
          - ''
          - - 'service-nodegrp1-private'
            - {'Fn::ImportValue': !Sub '${ParentVpcStack}-environment-abbr'}
            - '-subnet1' 
      - Key: Project
        Value: {'Fn::ImportValue': !Sub '${ParentVpcStack}-projectname'} 
      - Key: Env
        Value: {'Fn::ImportValue': !Sub '${ParentVpcStack}-environment'} 
      - Key: Zone
        Value: 'service zone'   
      - Key: Creater
        Value: !Sub '${StackCreater}'      
      - Key: Purpose
        Value: 'service for nodegrp1 in (ap-southeast-2a)'  
      - Key: 'kubernetes.io/role/internal-elb'
        Value: 1     

  SVCNodeGroup1PrivateSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref SVCNodeGroup1PrivateSubnet1
      RouteTableId: {'Fn::ImportValue': !Sub '${ParentVpcStack}-route1'}
      
  SVCNodeGroup1PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Metadata:
      Comment: service-typeAwas-private-p-subnet2
    Properties:
      AvailabilityZone:
        Fn::Select:
        - '2'
        - Fn::GetAZs:
            Ref: AWS::Region
      CidrBlock:
        Ref: SVCNodeGroup1PrivateSubnet2Block
      VpcId: {'Fn::ImportValue': !Sub '${ParentVpcStack}-vpc'}
      Tags:
      - Key: Name
        Value: !Join 
          - ''
          - - 'service-nodegrp1-private'
            - {'Fn::ImportValue': !Sub '${ParentVpcStack}-environment-abbr'}
            - '-subnet2' 
      - Key: Project
        Value: {'Fn::ImportValue': !Sub '${ParentVpcStack}-projectname'} 
      - Key: Env
        Value: {'Fn::ImportValue': !Sub '${ParentVpcStack}-environment'} 
      - Key: Zone
        Value: 'service zone'   
      - Key: Creater
        Value: !Sub '${StackCreater}'      
      - Key: Purpose
        Value: 'service for nodegrp1 in (ap-southeast-2c)'  
      - Key: 'kubernetes.io/role/internal-elb'
        Value: 1     
        
  SVCNodeGroup1PrivateSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref SVCNodeGroup1PrivateSubnet2
      RouteTableId: {'Fn::ImportValue': !Sub '${ParentVpcStack}-route2'}


  SVCNodeGroup2PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Metadata:
      Comment: service-typeAdb-private-p-subnet1
    Properties:
      AvailabilityZone:
        Fn::Select:
        - '0'
        - Fn::GetAZs:
            Ref: AWS::Region
      CidrBlock:
        Ref: SVCNodeGroup2PrivateSubnet1Block
      VpcId: {'Fn::ImportValue': !Sub '${ParentVpcStack}-vpc'}
      Tags:
      - Key: Name
        Value: !Join 
          - ''
          - - 'service-nodegrp2-private'
            - {'Fn::ImportValue': !Sub '${ParentVpcStack}-environment-abbr'}
            - '-subnet1' 
      - Key: Project
        Value: {'Fn::ImportValue': !Sub '${ParentVpcStack}-projectname'} 
      - Key: Env
        Value: {'Fn::ImportValue': !Sub '${ParentVpcStack}-environment'} 
      - Key: Zone
        Value: 'service zone'   
      - Key: Creater
        Value: !Sub '${StackCreater}'      
      - Key: Purpose
        Value: 'service for nodegrp2 in (ap-southeast-2a)'  
      - Key: 'kubernetes.io/role/internal-elb'
        Value: 1     
        
  SVCNodeGroup2PrivateSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref SVCNodeGroup2PrivateSubnet1
      RouteTableId: {'Fn::ImportValue': !Sub '${ParentVpcStack}-route1'} 
      
  SVCNodeGroup2PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Metadata:
      Comment: service-typeAdb-private-p-subnet2
    Properties:
      AvailabilityZone:
        Fn::Select:
        - '2'
        - Fn::GetAZs:
            Ref: AWS::Region
      CidrBlock:
        Ref: SVCNodeGroup2PrivateSubnet2Block
      VpcId: {'Fn::ImportValue': !Sub '${ParentVpcStack}-vpc'}
      Tags:
      - Key: Name
        Value: !Join 
          - ''
          - - 'service-nodegrp2-private'
            - {'Fn::ImportValue': !Sub '${ParentVpcStack}-environment-abbr'}
            - '-subnet2' 
      - Key: Project
        Value: {'Fn::ImportValue': !Sub '${ParentVpcStack}-projectname'} 
      - Key: Env
        Value: {'Fn::ImportValue': !Sub '${ParentVpcStack}-environment'} 
      - Key: Zone
        Value: 'service zone'   
      - Key: Creater
        Value: !Sub '${StackCreater}'      
      - Key: Purpose
        Value: 'service for nodegrp2 in (ap-southeast-2c)'  
      - Key: 'kubernetes.io/role/internal-elb'
        Value: 1     
        
  SVCNodeGroup2PrivateSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref SVCNodeGroup2PrivateSubnet2
      RouteTableId: {'Fn::ImportValue': !Sub '${ParentVpcStack}-route2'} 
      
## Security Group     
  ControlPlaneSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Cluster communication with worker nodes
      VpcId: {'Fn::ImportValue': !Sub '${ParentVpcStack}-vpc'}
      Tags:
        - Key: Name
          Value: !Join 
            - ''
            - - {'Fn::ImportValue': !Sub '${ParentVpcStack}-projectname'} 
              - {'Fn::ImportValue': !Sub '${ParentVpcStack}-environment-abbr'}
              - '-controlplane-sg'     
        - Key: Project
          Value: {'Fn::ImportValue': !Sub '${ParentVpcStack}-projectname'} 
        - Key: Env
          Value: {'Fn::ImportValue': !Sub '${ParentVpcStack}-environment'} 
        - Key: Zone
          Value: 'service zone'   
        - Key: Creater
          Value: !Sub '${StackCreater}'   
        - Key: Purpose
          Value: 'Cluster communication with worker nodes'     

#----------------------[[ Outputs ]]-------------
Outputs:
  Templatename:
    Description: 'Cloudformation for service configuration of SK IaC standard infrastructure.'
    Value: 'sk-IaC-infra-vpc-svc-EKSCluster.yaml'
    
  TemplateVersion:
    Description: 'sk-IaC-infra-vpc-svc-EKSCluster.yaml version.'
    Value: '1.0'
    
  stackname:
    Description: 'Service Type A Stack name.'
    Value: !Sub '${AWS::StackName}'
    
  projectname:
    Description: 'project name.'
    Value: {'Fn::ImportValue': !Sub '${ParentVpcStack}-projectname'} 
    Export:
      Name: !Sub '${AWS::StackName}-projectname'
      
  environment:
    Description: Environment
    Value: {'Fn::ImportValue': !Sub '${ParentVpcStack}-environment'} 
    Export:
      Name: !Sub '${AWS::StackName}-environment'

  environmentabbr:
    Description: 'Environment Abbr'
    Value: {'Fn::ImportValue': !Sub '${ParentVpcStack}-environment-abbr'} 
    Export:
      Name: !Sub '${AWS::StackName}-environment-abbr'      

  skIaCVpcId:
    Description: The VPC Id
    Value:  {'Fn::ImportValue': !Sub '${ParentVpcStack}-vpc'} 
    Export:
      Name: !Sub '${AWS::StackName}-vpc'

  ControlPlaneSecurityGroup:
    Description: Cluster communication with worker nodes
    Value: !Ref ControlPlaneSecurityGroup        
    Export:
      Name: !Sub '${AWS::StackName}-controlplanesg'
